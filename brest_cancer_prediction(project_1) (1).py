# -*- coding: utf-8 -*-
"""Brest_Cancer_prediction(Project_1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13o51Q5qBW8IVZDwJmuWhmeCSSkMi5RKp
"""

#load dataset
import warnings
warnings.filterwarnings("ignore")
import numpy as np
import pandas as pd
df=pd.read_csv("/content/Brest_cancer_prediction.csv")
df

#Dependencies imported
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report
from sklearn.metrics import ConfusionMatrixDisplay
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.naive_bayes import MultinomialNB
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import AdaBoostClassifier
from imblearn.over_sampling import SMOTE
from imblearn.under_sampling import RandomUnderSampler
from sklearn.decomposition import PCA
import seaborn as sns

df.shape

df.dtypes

df.isna().sum()

df.drop(axis=1, columns="id", inplace=True)

df.drop(axis=1, columns="Unnamed: 32", inplace=True)

df.corr()

df.drop(columns=["radius_mean","perimeter_mean","area_mean","radius_se","perimeter_se","area_se","symmetry_se","texture_worst","smoothness_worst"],axis=1,inplace=True)

lable_encoder=LabelEncoder()
df["diagnosis"]=lable_encoder.fit_transform(df["diagnosis"])
df["diagnosis"]

df

df["diagnosis"].value_counts()     # 1 - malignant, 0- Benign

df.dtypes

X=df.iloc[:,1:]
X

y=df.iloc[:,0]
y

mms=MinMaxScaler()
X=mms.fit_transform(X)
X

#split X and y for train,test
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=1)

X_train.shape

y_test.shape

print(sns.countplot(data=df,y='diagnosis'))
df['diagnosis'].value_counts()

sns.countplot(x='compactness_mean',data=df,hue='diagnosis')

sns.jointplot(x='compactness_mean',y='diagnosis',color='g',data=df,linewidth=3)

import matplotlib.pyplot as plt
y=df['diagnosis'].value_counts()
plt.figure(figsize=(5,5))
labels=["Has cancer","Doesnt have cancer"]
plt.pie(y,labels=labels)
plt.legend(loc='lower left')
plt.title('Detection')
plt.show()

kn=KNeighborsClassifier()
sv=SVC()
nb=GaussianNB()
mn=MultinomialNB()
dt=DecisionTreeClassifier()
rf=RandomForestClassifier(random_state=1)
ab=AdaBoostClassifier()
models=[kn,sv,nb,mn,dt,rf,ab]
for model in models:
  print('*'*25,model,'*'*25)
  model.fit(X_train,y_train)
  y_pred=model.predict(X_test)
  print(classification_report(y_test,y_pred))
  print(ConfusionMatrixDisplay.from_predictions(y_test,y_pred))

y_train.value_counts()

sm=SMOTE()
X_train_sm,y_train_sm=sm.fit_resample(X_train,y_train)

y_train_sm.value_counts()

knsm=KNeighborsClassifier()
svsm=SVC()
nbsm=GaussianNB()
mnsm=MultinomialNB()
dtsm=DecisionTreeClassifier()
rfsm=RandomForestClassifier(random_state=1)
absm=AdaBoostClassifier()
models1=[knsm,svsm,nbsm,mnsm,dtsm,rfsm,absm]
for model in models1:
  print('*'*25,model,'*'*25)
  model.fit(X_train_sm,y_train_sm)
  y_pred=model.predict(X_test)
  print(classification_report(y_test,y_pred))
  print(ConfusionMatrixDisplay.from_predictions(y_test,y_pred))

us=RandomUnderSampler(random_state=1)
X_train_us,y_train_us=us.fit_resample(X_train,y_train)

y_train_us.value_counts()

knus=KNeighborsClassifier()
svus=SVC()
nbus=GaussianNB()
mnus=MultinomialNB()
dtus=DecisionTreeClassifier()
rfus=RandomForestClassifier(random_state=1)
abus=AdaBoostClassifier()
models2=[knus,svus,nbus,mnus,dtus,rfus,abus]
for model in models2:
  print('*'*25,model,'*'*25)
  model.fit(X_train_us,y_train_us)
  y_pred=model.predict(X_test)
  print(classification_report(y_test,y_pred))
  print(ConfusionMatrixDisplay.from_predictions(y_test,y_pred))

pca=PCA()
X_train_pca=pca.fit_transform(X_train)
X_test_pca=pca.transform(X_test)

knpca=KNeighborsClassifier()
svpca=SVC()
nbpca=GaussianNB()
dtpca=DecisionTreeClassifier()
rfpca=RandomForestClassifier(random_state=1)
abpca=AdaBoostClassifier()
models3=[knpca,svpca,nbpca,dtpca,rfpca,abpca]
for model in models3:
  print('*'*25,model,'*'*25)
  model.fit(X_train_pca,y_train)
  y_pred=model.predict(X_test_pca)
  print(classification_report(y_test,y_pred))
  print(ConfusionMatrixDisplay.from_predictions(y_test,y_pred))

